<style>
  .modal_overlay {
    position: fixed;
    top: 0;
    bottom: 0;
    left: 0;
    right: 0;
    z-index: 9;
    background: rgba(0, 0, 0, 0.52);
    box-shadow: 0 4px 30px rgba(0, 0, 0, 0.1);
    backdrop-filter: blur(6.2px);
    -webkit-backdrop-filter: blur(6.2px);
    display: flex;
    justify-content: center;
    align-items: center;
  }
  .modalContainer {
    background-color: white;
    border-radius: 10px;
    border: 1px solid;
    width: 100%;
    max-width: 500px;
    position: relative;
  }
  .guper_modal_heading {
    font-size: 35px;
    font-weight: 900;
    line-height: 1;
  }
  .closeBtn::after{
    display: none !important;
  }
  .closeBtn{
    position: absolute;
    top: 10px;
    right: 10px;
    border-radius: 100%;
    aspect-ratio: 1/1;
    padding: 20px;
    border: none;
  }
  .modalContainer .heading {
    padding: 10px;
    display: flex;
    align-items: center;
    justify-content: center;
    padding-bottom: 40px;
  }
  .guperMessage {
    padding: 10px;
    padding-bottom: 50px;
    text-align: center;
    font-size: 20px;
    font-weight: 600;
  }
  .action_container {
    display: flex;
    justify-content: flex-end;
    align-items: center;
    gap: 10px;
    padding: 10px;
    background: #ccc;
    border-radius: 0px 0px 10px 10px;
  }
  .modalContainer .button {
    font-size: 12px;
    min-width: auto;
    min-height: auto;
    padding: 5px 10px;
  }
  .modalContainer .button {
    font-size: 12px;
    min-width: auto;
    min-height: auto;
    padding: 5px 10px;
  }
  .buttonContainer {
    display: flex;
    justify-content: end;
    padding: 10px;
    padding-right: 0;
  }
  .discountContainer .code {
    font-weight: 600;
  }
  .discountContainer .codeMsg {
    font-weight: 400;
  }
  .discountContainer {
    display: flex;
    flex-direction: column;
    align-items: end;
    text-align: end;
  }
  .code_container input {
    font-size: 16px;
    width: 100%;
    text-align: center;
  }
  .code_container span {
    max-width: 30px;
    border: 1px solid;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 5px;
    cursor: pointer;
  }
  .code_container span img {
    width: 100%;
  }
  .code_container {
    display: flex;
    width: 100%;
    justify-content: flex-end;
  }
</style>

<script>
  let confirmationToken

  const currentUrl = window.location.href;
  if (currentUrl.includes("cart")) {
    const rewardBtn = `<div class="buttonContainer"><button class="button modal_activator" onclick="checkReward()">Reward</button></div>`
    const cartContainer = document.querySelector("cart-items .page-width")
    cartContainer.insertAdjacentHTML("afterbegin", rewardBtn)

    function checkReward(){
      document.querySelector(".modal_activator").innerText = "Loading..."
      const cartData = {{ cart | json }};
      
      const cartItems = cartData.items.map(item => ({
        skuRefId: item.id,
        name: item.title,
        quantity: item.quantity,
        price: Number(item.price/100)
      }));
   
      const modalBody = `
        <div class="modal_overlay">
          <div class="modalContainer">
            <button class="closeBtn button" aria-label="Close">&times;</button>
            <div class="heading">
              <span class="guper_modal_heading">Login!</span>
            </div>
            <div class="guper_content_container">
              <div class="guperMessage">Login to redeem your prize</div>
              <div class="action_container">
                <div class="button cancelBtn">Cancel</div>
                <div class="button button--secondary" onclick="window.location.href='{{ routes.account_login_url }}'">
                  Login
                </div>
              </div>
            </div>
          </div>
        </div>
      `;
      
      // If the customer is not logged in, show the modal
      if ("{{ customer.id }}" === "") {
        document.body.insertAdjacentHTML("afterbegin", modalBody);
        attachModalListeners();
      } else {
        // If logged in, then send the reward request
        const customer = {
          id: "{{ customer.id }}",
          name: "{{ customer.name }}",
          email: "{{ customer.email }}"
        };
        let guperSurprise
        
        const store = {
          name: Shopify.shop,
          id: {{ shop.id }}
        };
        
        const domain = "https://fabulous-occupation-greg-overview.trycloudflare.com";
        const apiUrl = `${domain}/api/getRewardByOrder`;
        
        fetch(apiUrl, {
          method: "POST",
          body: JSON.stringify({
            data: {
              shop: store,
              items: cartItems,
              customer: customer
            }
          })
        })
        .then(res => res.json())
        .then(data => {
          getAwardsDetail(domain, data)
        })
        .catch(err => {
          console.error("Error fetching rewards:", err)
        });
      }
    }
  }
  function getAwardsDetail(domain, data){
    const redeemableRewardTotal = data?.reward?.cashback?.thisOrder?.redeemable?.total
    confirmationToken = data?.reward?.confirmToken
    const rewardModal = 
    `
      <div class="modal_overlay">
        <div class="modalContainer">
          <button class="closeBtn button" aria-label="Close">&times;</button>
          <div class="heading">
            <span class="guper_modal_heading">${"Redeem your reward"}</span>
          </div>
          <div class="guper_content_container">
            <div class="guperMessage">
              $${redeemableRewardTotal} Off
            </div>
            <div class="action_container">
              <button class="button cancelBtn">Cancel</button>
              <button ${redeemableRewardTotal && redeemableRewardTotal > 0 ? "" : "disabled" } class="button button--secondary" onclick="redeemReward('${domain}',${redeemableRewardTotal})">
                Redeem
              </button>
            </div>
          </div>
        </div>
      </div>
    `

    document.body.insertAdjacentHTML("afterbegin", rewardModal);
    attachModalListeners()
    guperSurprise = data
    
  }
  // Function to attach event listeners to the modal elements
  function attachModalListeners() {
    // Function to remove the modal from the DOM
    function hideModal() {
      const modal = document.querySelector('.modal_overlay');
      if (modal) {
        modal.remove();
      }
      document.querySelector(".modal_activator").innerText = "Reward"
    }
    
    // Attach listeners after the modal has been inserted into the DOM
    // Use a timeout to ensure elements are available, or call when DOM is ready.
    setTimeout(function() {
      const overlay = document.querySelector('.modal_overlay');
      if (overlay) {
        // Clicking on the overlay hides the modal.
        overlay.addEventListener('click', hideModal);
      }
      
      const modalContainer = document.querySelector('.modalContainer');
      if (modalContainer) {
        // Stop propagation to prevent clicks inside modal from closing it.
        modalContainer.addEventListener('click', function(e) {
          e.stopPropagation();
        });
      }
      
      const closeBtn = document.querySelector('.closeBtn');
      if (closeBtn) {
        closeBtn.addEventListener('click', function(e) {
          e.stopPropagation();
          hideModal();
        });
      }
      
      const cancelBtn = document.querySelector('.cancelBtn');
      if (cancelBtn) {
        cancelBtn.addEventListener('click', function(e) {
          e.stopPropagation();
          hideModal();
        });
      }
    }, 0);
  }

  function copyCode(code) {
    // Create a temporary input element
    const tempInput = document.createElement('input');
    tempInput.value = code;
    document.body.appendChild(tempInput);
    
    // Select the content of the input field
    tempInput.select();
    tempInput.setSelectionRange(0, 99999); // For mobile devices
  
    // Copy the text inside the input field
    try {
      document.execCommand('copy');
      document.getElementById("copy_btn_img").src = "{{ 'tick.svg' | asset_url }}"
      document.getElementById("checkout").disabled = false

      setTimeout(()=>{
        document.getElementById("copy_btn_img").src = "{{ 'copy.svg' | asset_url }}"
      },[2000])

    } catch (err) {
      console.error('Unable to copy', err);
    }
    
    // Remove the temporary input element from the DOM
    document.body.removeChild(tempInput);
  }

  function redeemReward(domain, amount){
    const redeemUrl = `${domain}/api/redeemReward`
    fetch(redeemUrl,{
      method: "POST",
      body: JSON.stringify({
        customerId: "{{ customer.id }}",
        shop: Shopify.shop,
        amount
      })
    })
    .then(res=>res.json())
    .then(data=>{
      document.getElementById("checkout").disabled = true
      const {code, title} = data.discount
      const discountMsgBody = `<div class="discountContainer">
        <span class="codeMsg">enter this code on checkout to redeem your reward</span>
        <div class="code_container">
          <input id="discountCode" value="${code}" readonly />
          <span onclick="copyCode('${code}')"><img id="copy_btn_img" src="{{ 'copy.svg' | asset_url }}" /></span>
        </div>
      </div>`
      document.querySelector(".cart__footer .cart__blocks").insertAdjacentHTML("afterbegin", discountMsgBody)
      document.querySelector(".modal_overlay").style.display = "none"
      document.querySelector(".buttonContainer").style.display = "none"
      fetch('/cart/update.js', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          note: `guper-${confirmationToken}`
        })
      })
        .then(response => response.json())
        .then(data => {
          console.log('Cart updated successfully:', data);
        })
        .catch(error => {
          console.error('Error updating cart:', error);
        });      
    })
    .catch(err=>{
      console.error("Error redeeming rewards", err)
    })
  }
</script>

{% schema %}
{
  "name": "Loyalty Rewards",
  "target": "body"
}
{% endschema %}
